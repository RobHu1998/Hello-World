using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Timers;
using System.Data.SqlClient;
using System.Security.Cryptography;

namespace FantasyPledge
{
    public partial class FirstTime : Form
    {
        public FirstTime()
        {
            InitializeComponent();
        }

        internal int Step = 1;
        internal bool CanProcceed;

        DataLoader DataLoader = new DataLoader();
        DataTable activeTable, groupTable, teamTable;
        LoginSetup LoginSetup = new LoginSetup();

        private void NextButton_Click(object sender, EventArgs e)
        {
            if (Step == 1)
            {
                if (!String.IsNullOrEmpty(TeamNameTextBox.Text) && !String.IsNullOrWhiteSpace(TeamNameTextBox.Text) && TeamNameTextBox.Text.Count<char>() >= 4)
                {
                    teamTable = DataLoader.LoadDataTable("Team");
                    activeTable = DataLoader.LoadDataTable("Active");
                    teamTable.Rows.Add(-1, TeamNameTextBox.Text);
                    CanProcceed = true;
                }
                else
                {
                    MessageBox.Show("Not enough characters, or Whitespaces were found. Please create a valid Teamname", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    CanProcceed = false;
                }
            }

            if (Step == 2)
            {
                if (!String.IsNullOrEmpty(GroupRollTextBox.Text) && GroupComboBox.SelectedItem != null)
                {
                    activeTable = DataLoader.LoadDataTable("Active");
                    groupTable = DataLoader.LoadDataTable("Group");

                    int value = int.Parse(GroupRollTextBox.Text);
                    DataLoader.UpdateData("Active","DiceRoll",LoginSetup.ActiveId,value);
                    string selection = GroupComboBox.Text;
                    int groupId=0;
                    for (int i = 0; i < groupTable.Rows.Count; i++)
                    {
                        if (groupTable.Rows[i]["GroupName"].ToString() == selection)
                        {
                            groupId = Convert.ToInt16(groupTable.Rows[i]["GroupID"])-1;
                        }
                    }
                    DataLoader.UpdateData("Active", "GroupID", LoginSetup.ActiveId, groupId);
                    DataLoader.UpdateData("Group", "NumberOfActive", groupId, Convert.ToInt16(groupTable.Rows[groupId]["NumberOfActive"]) + 1);
                    if (groupTable.Rows[groupId]["NumberOfActive"] == groupTable.Rows[groupId]["Max"])
                    {
                        DataLoader.UpdateData("Group","IsFull",groupId,true);
                    }
                    CanProcceed = true;
                   
                }
                else
                {
                    MessageBox.Show("Group not selected, or Dice Roll number was not created. Please join or a group or roll the dice", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    CanProcceed = false;
                }
            }
            if (CanProcceed)
            {
                Step++;
                FirstTimePanel.Refresh();
            }
        }

        private void CountDown_Tick(object sender, EventArgs e)
        {
            CountDown.Enabled = false;
            TeamPick teamPick = new TeamPick();
            this.Hide();
            teamPick.Closed += (s, args) => this.Close();
            teamPick.Show();
        }

        private void FirstTime_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'fantasyPledgeDataSet.Group' table. You can move, or remove it, as needed.
            this.groupTableAdapter.Fill(this.fantasyPledgeDataSet.Group);

        }

        private void FirstTimePanel_Paint(object sender, PaintEventArgs e)
        {
            if(Step == 1)
            {
                AllClearLabel.Hide();
                GroupChoseLabel.Hide();
                GroupComboBox.Hide();
                GroupRollButton.Hide();
                GroupRollLabel.Hide();
                GroupRollTextBox.Hide();
                Step1Label.ForeColor = System.Drawing.SystemColors.ControlText;
                Step2Label.ForeColor = System.Drawing.SystemColors.GrayText;
                FinalStepLabel.ForeColor = System.Drawing.SystemColors.GrayText;
                TeamNameLabel.Show();
                TeamNameHintLabel.Show();
                TeamNameTextBox.Show();
                
            }

            if (Step == 2)
            {
                AllClearLabel.Hide();
                TeamNameLabel.Hide();
                TeamNameHintLabel.Hide();
                TeamNameTextBox.Hide();
                Step1Label.ForeColor = System.Drawing.SystemColors.GrayText;
                Step2Label.ForeColor = System.Drawing.SystemColors.ControlText;
                FinalStepLabel.ForeColor = System.Drawing.SystemColors.GrayText;
                GroupChoseLabel.Show();
                GroupComboBox.Show();
                GroupRollButton.Show();
                GroupRollLabel.Show();
                GroupRollTextBox.Show();

                
            }

            if (Step == 3)
            {
                TeamNameLabel.Hide();
                TeamNameHintLabel.Hide();
                TeamNameTextBox.Hide();
                GroupChoseLabel.Hide();
                GroupComboBox.Hide();
                GroupRollButton.Hide();
                GroupRollLabel.Hide();
                GroupRollTextBox.Hide();
                Step1Label.ForeColor = System.Drawing.SystemColors.GrayText;
                Step2Label.ForeColor = System.Drawing.SystemColors.GrayText;
                FinalStepLabel.ForeColor = System.Drawing.SystemColors.ControlText;
                
                //if (!AllClear)
                //{
                //    AllClearLabel.Show();
                //}
                //if (AllClear)
                //{
                CountDown.Enabled = true;
                    CountDown.Start();
                //}
            }
        }

        private void GroupRollButton_Click(object sender, EventArgs e)
        {
            Random rnd = new Random();
            int Num = 0;
            int One = 0, Two = 0, Three = 0, Four = 0, Five = 0, Six = 0;
            for (int i = 0; i < 300; ++i)
            {
                Num = rnd.Next(1, 7);
                if (Num == 1)
                {
                    One++;
                }
                if (Num == 2)
                {
                    Two++;
                }
                if (Num == 3)
                {
                    Three++;
                }
                if (Num == 4)
                {
                    Four++;
                }
                if (Num == 5)
                {
                    Five++;
                }
                if (Num == 6)
                {
                    Six++;
                }
            }
            if(One> Two && One > Three && One > Four && One > Five && One > Six)
            {
                Num = 1;
            }
            if (Two > One && Two > Three && Two > Four && Two > Five && Two > Six)
            {
                Num = 2;
            }
            if (Three > One && Three > Two && Three > Four && Three > Five && Three > Six)
            {
                Num = 3;
            }
            if (Four > One && Four > Three && Four > Two && Four > Five && Four > Six)
            {
                Num = 4;
            }
            if (Five > One && Five > Three && Five > Four && Five > Two && Five > Six)
            {
                Num = 5;
            }
            if (Six > One && Six > Three && Six > Four && Six > Five && Six > Two)
            {
                Num = 6;
            }

            GroupRollTextBox.Text = Num.ToString();
            GroupRollButton.Enabled = false;
           

        }
    }
}
